{
    "docs": [
        {
            "location": "/introduction/", 
            "text": "This document is the property of Paul M. Garrett, a PhD Candidate at the University\nof Newcastle, Australia and is written in partial fulfilment of his Doctorate\nin Philosophy (Psychology).\n\n\nThe document will cover the primary aims of my Thesis.\n\n\n\n\nSystems Factorial Technology\n\n\nMeasures of Cognitive Architecture\n\n\nBayesian Measures of Architecture\n\n\nMeasures of Cognitive Workload\n\n\n\n\n\n\nSFT with Matlab Package\n\n\nSimulating Data\n\n\nFun Functions and more\n\n\n\n\n\n\nSystems of Numerical Cognition\n\n\nSystems of Subitizing\n\n\nSystems of Estimation\n\n\nExact Report vs. Comparative Judgements: Differences in Estimation\n\n\n\n\n\n\nSystem Error Processing \n\n\nDiagnosing Channel Errors in Parallel Systems\n\n\nDiagnosing Channel Errors in Serial Systems\n\n\n\n\n\n\nBreaking the Rules\n\n\nMixture Models of Architecture and Stopping Rule\n\n\n\n\n\n\nThe Neural Correlates of Cognition aka Why Should We Care?\n\n\n\n\nTo get in contact with Paul, please email Paul.Garrett@uon.edu.au or\npaulgarrett2016@gmail.com", 
            "title": "Introduction"
        }, 
        {
            "location": "/SystemsFactorialTechnology/", 
            "text": "Introduction\n\n\n\n\nOn the corner of a busy road, a man waits for the lights to change. Impatient to be home, he looks down at his phone and replies to a message. Glimpsing a green signal, and hearing the crossing's buzz, Tom steps out onto the road.\n\n\nOur experience of the world relies upon the independent processing and seamless integration of sensory modalities. Tactile, auditory, olfactory and visual information all combine to provide a rich description of the world around us. In the above example, Tom uses visual cues --the flash of green-- and auditory cues --the buzzing signal-- to decide the street is safe to cross. In doing so, Tom frames an important question for Cognitive Scientists. How do we unify two independent sensory streams into a single conscious experience? \n\n\nCognitive Architecture\n\n\nSince Donders' (1868) subtraction method, cognitive scientists have been using response time (RT) as a measure of cognitive processing. Donders assumed the difference in RT between two tasks of varying complexity, was a direct index of additional cognitive processing. That is to say, he assumed additional complexity resulted in strictly additive RTs. Under an additive or \nSerial\n cognitive system, processing on one source of information must terminate before processing on a secondary source may begin. \n\n\nMore recently, Sternberg (1966, 1969; later Navon, 1977; Treisman \n Gelade, 1980) used RT to show that cognitive processes need not be strictly additive. For example, in Treisman and Gelade (1980) Feature Integration Theory of Attention, it was shown that RT remained invariant across set size when participants searched a display for a singular feature (a dimension of a stimulus, such as a colour or shape), however increased monotonicity when searching for a conjunction of features (i.e., a coloured triangle; see Figure 1). As search size \u00e0 la complexity increased in both conditions, these findings suggest that a singular feature can be processed irrespective of set size through an over-additive or \nParallel\n cognitive system. \n\n\n \n \n \n\n \nFigure 1.\n Illustrative example of Mean RT across set size for Feature and Conjunction searchers, as per Treismand and Gelade's  (1980) Feature Integration Theory of Attention. \n\n\nUnder a parallel cognitive system, two or more process channels compete or 'race' towards finishing. If either channel provides sufficient information for a decision to be made, RT would reflect the faster of the two channels under a minimum-time 'Race Model'. However if either channel alone is insufficient to generate a response, a maximum time search will be completed with RT reflecting the slower of the two competing channels. A special case of parallel system processing, termed \nCoactivation\n pools both channels into a single decision accumulator, allowing for faster responses than predicted by either channel alone (see Figure 2). Together, Serial, Parallel and Coactive cognitive systems form the three primary Cognitive Architectures. \n\n\n \n \n\n\n \nFigure 2.\n Illustration of Serial, Parallel and Coactive Models. Information feeds forward through each model from input, to information or evidence accumulation, before resulting in a response generation. In the case of the serial model the dotted line indicates a minimum time or 'Self Terminating' response process strategy, where a decision is made after processing completes on the first channel accumulator. \n\n\nStopping Rule\n\n\nThe \nStopping Rule\n of a system determines when system processing may terminate. As mentioned above, a minimum-time or 'Self Terminating' stopping rule allows processing to terminate after completion of a single channel. This is the case in the above traffic light example, with either the completed processing of either the green 'Walk' signal, or auditory buzz signal sufficient to generate a safe crossing. By contrast a maximum time or 'Exhaustive' search process requires full processing of both channels to ensure a correct response. This is the case for a driver at a pedestrian crossing, both a green traffic light and a lack of pedestrians on the road is required for a safe trip. The difference between minimum-time and exhaustive stopping rules is illustrated as part of the Serial System in Figure 2.\n\n\nWorkload Capacity\n\n\nThe final important aspect of system processes involves Cognitive \nWorkload Capacity\n. Workload Capacity is a measure of cognitive efficiency, and assesses whether additional information slows or improves the rate of processing. If additional information, i.e., additional display items, slows the rate of processing the system is said to have \nLimited\n capacity. If the rate of processing is unaffected by additional items, the system is said to have \nUnlimited\n capacity. Finally, if additional items speed the rate of processing, such as in the case of Coactivation, the system is said to have \nSuper\n capacity.\n\n\nUnderstanding workload capacity is vital to the correct interpretation of Parallel and Serial systems. As mathematically proven by Townsend (1969, \n1971\n) any RT generated by a serial system, can reach mathematical equivalence under a parallel limited capacity model. That is to say, at the level of the \nmean RT, serial and parallel models can become entirely indistinguishable. To avoid the issue of model mimicry, Townsend created the methodology and set of analysis tools called Systems Factorial Technology.\n\n\nSystems Factorial Technology (SFT)\n\n\nSystems factorial technology is a non-parametric framework and analysis technique that utilizes response time distributions to assess differences in system properties (Townsend \n Nozawa, 1995) SFT compares the features of theoretical process models, to the models generated using real response time data. These theoretic process models represent unique combinations of stopping rule, capacity and architecture. Comparison of real response time models, to these unique theoretical process models (in addition to further statistical tools) allows for independent diagnosis of Architecture, Capacity and Stopping Rule, in the absence of model mimicry. \n\n\nThe Redundant Target Paradigm\n\n\nSFT requires a specific empirical framework, termed the Double Factorial Design. Figure 3 illustrates Townsend and Nozawa\u2019s (1995) classic example of a double factorial design, utilizing a redundant target task. Here participants must respond either \u2018yes\u2019 or \u2018no\u2019 to the presence of a target (e.g., dot of light), which may appear in two positions (left or right). Target presence or absence forms the first factorial level. Double target displays are redundant, as either target alone constitutes a correct \u2018yes\u2019 response.\n\n\n \n \n\n\n \nFigure 3.\n Illustration of a double factorial design necessary for Systems Factorial Technology. The task is a redundant target paradigm. Each sector represents a unique stimulus display. For example, the top left cell represents the Double (redundant) Target, with a High-High target salience manipulation. Figure adapted from Townsend \n Nozawa (1995). \n\n\nThe Survivor Interaction Contrast\n\n\n \n \n\n\nThe Capacity Coefficient\n\n\nNew Approaches to Old Problems", 
            "title": "Systems Factorial Technology (SFT)"
        }, 
        {
            "location": "/SystemsFactorialTechnology/#introduction", 
            "text": "On the corner of a busy road, a man waits for the lights to change. Impatient to be home, he looks down at his phone and replies to a message. Glimpsing a green signal, and hearing the crossing's buzz, Tom steps out onto the road.  Our experience of the world relies upon the independent processing and seamless integration of sensory modalities. Tactile, auditory, olfactory and visual information all combine to provide a rich description of the world around us. In the above example, Tom uses visual cues --the flash of green-- and auditory cues --the buzzing signal-- to decide the street is safe to cross. In doing so, Tom frames an important question for Cognitive Scientists. How do we unify two independent sensory streams into a single conscious experience?", 
            "title": "Introduction"
        }, 
        {
            "location": "/SystemsFactorialTechnology/#cognitive-architecture", 
            "text": "Since Donders' (1868) subtraction method, cognitive scientists have been using response time (RT) as a measure of cognitive processing. Donders assumed the difference in RT between two tasks of varying complexity, was a direct index of additional cognitive processing. That is to say, he assumed additional complexity resulted in strictly additive RTs. Under an additive or  Serial  cognitive system, processing on one source of information must terminate before processing on a secondary source may begin.   More recently, Sternberg (1966, 1969; later Navon, 1977; Treisman   Gelade, 1980) used RT to show that cognitive processes need not be strictly additive. For example, in Treisman and Gelade (1980) Feature Integration Theory of Attention, it was shown that RT remained invariant across set size when participants searched a display for a singular feature (a dimension of a stimulus, such as a colour or shape), however increased monotonicity when searching for a conjunction of features (i.e., a coloured triangle; see Figure 1). As search size \u00e0 la complexity increased in both conditions, these findings suggest that a singular feature can be processed irrespective of set size through an over-additive or  Parallel  cognitive system.           Figure 1.  Illustrative example of Mean RT across set size for Feature and Conjunction searchers, as per Treismand and Gelade's  (1980) Feature Integration Theory of Attention.   Under a parallel cognitive system, two or more process channels compete or 'race' towards finishing. If either channel provides sufficient information for a decision to be made, RT would reflect the faster of the two channels under a minimum-time 'Race Model'. However if either channel alone is insufficient to generate a response, a maximum time search will be completed with RT reflecting the slower of the two competing channels. A special case of parallel system processing, termed  Coactivation  pools both channels into a single decision accumulator, allowing for faster responses than predicted by either channel alone (see Figure 2). Together, Serial, Parallel and Coactive cognitive systems form the three primary Cognitive Architectures.          Figure 2.  Illustration of Serial, Parallel and Coactive Models. Information feeds forward through each model from input, to information or evidence accumulation, before resulting in a response generation. In the case of the serial model the dotted line indicates a minimum time or 'Self Terminating' response process strategy, where a decision is made after processing completes on the first channel accumulator.", 
            "title": "Cognitive Architecture"
        }, 
        {
            "location": "/SystemsFactorialTechnology/#stopping-rule", 
            "text": "The  Stopping Rule  of a system determines when system processing may terminate. As mentioned above, a minimum-time or 'Self Terminating' stopping rule allows processing to terminate after completion of a single channel. This is the case in the above traffic light example, with either the completed processing of either the green 'Walk' signal, or auditory buzz signal sufficient to generate a safe crossing. By contrast a maximum time or 'Exhaustive' search process requires full processing of both channels to ensure a correct response. This is the case for a driver at a pedestrian crossing, both a green traffic light and a lack of pedestrians on the road is required for a safe trip. The difference between minimum-time and exhaustive stopping rules is illustrated as part of the Serial System in Figure 2.", 
            "title": "Stopping Rule"
        }, 
        {
            "location": "/SystemsFactorialTechnology/#workload-capacity", 
            "text": "The final important aspect of system processes involves Cognitive  Workload Capacity . Workload Capacity is a measure of cognitive efficiency, and assesses whether additional information slows or improves the rate of processing. If additional information, i.e., additional display items, slows the rate of processing the system is said to have  Limited  capacity. If the rate of processing is unaffected by additional items, the system is said to have  Unlimited  capacity. Finally, if additional items speed the rate of processing, such as in the case of Coactivation, the system is said to have  Super  capacity.  Understanding workload capacity is vital to the correct interpretation of Parallel and Serial systems. As mathematically proven by Townsend (1969,  1971 ) any RT generated by a serial system, can reach mathematical equivalence under a parallel limited capacity model. That is to say, at the level of the \nmean RT, serial and parallel models can become entirely indistinguishable. To avoid the issue of model mimicry, Townsend created the methodology and set of analysis tools called Systems Factorial Technology.", 
            "title": "Workload Capacity"
        }, 
        {
            "location": "/SystemsFactorialTechnology/#systems-factorial-technology-sft", 
            "text": "Systems factorial technology is a non-parametric framework and analysis technique that utilizes response time distributions to assess differences in system properties (Townsend   Nozawa, 1995) SFT compares the features of theoretical process models, to the models generated using real response time data. These theoretic process models represent unique combinations of stopping rule, capacity and architecture. Comparison of real response time models, to these unique theoretical process models (in addition to further statistical tools) allows for independent diagnosis of Architecture, Capacity and Stopping Rule, in the absence of model mimicry.", 
            "title": "Systems Factorial Technology (SFT)"
        }, 
        {
            "location": "/SystemsFactorialTechnology/#the-redundant-target-paradigm", 
            "text": "SFT requires a specific empirical framework, termed the Double Factorial Design. Figure 3 illustrates Townsend and Nozawa\u2019s (1995) classic example of a double factorial design, utilizing a redundant target task. Here participants must respond either \u2018yes\u2019 or \u2018no\u2019 to the presence of a target (e.g., dot of light), which may appear in two positions (left or right). Target presence or absence forms the first factorial level. Double target displays are redundant, as either target alone constitutes a correct \u2018yes\u2019 response.         Figure 3.  Illustration of a double factorial design necessary for Systems Factorial Technology. The task is a redundant target paradigm. Each sector represents a unique stimulus display. For example, the top left cell represents the Double (redundant) Target, with a High-High target salience manipulation. Figure adapted from Townsend   Nozawa (1995).", 
            "title": "The Redundant Target Paradigm"
        }, 
        {
            "location": "/SystemsFactorialTechnology/#the-survivor-interaction-contrast", 
            "text": "", 
            "title": "The Survivor Interaction Contrast"
        }, 
        {
            "location": "/SystemsFactorialTechnology/#the-capacity-coefficient", 
            "text": "", 
            "title": "The Capacity Coefficient"
        }, 
        {
            "location": "/SystemsFactorialTechnology/#new-approaches-to-old-problems", 
            "text": "", 
            "title": "New Approaches to Old Problems"
        }, 
        {
            "location": "/SFTwMatlab/SimulatingData/", 
            "text": "Simulating Response Time Data\n\n\nLinear Balistic Accumulator\n\n\nDiscuss the LBA here...\n\n\n \n \n\n\n \n\nFigure 1.\n Two Channel version of the Linear Ballistic Accumulator \n(LBA). Evidence for Channel A is gathered in the left hand accumulator, and for Channel B in \nthe right hand accumulator. Starting values for the evidence accumulation process (e.g., \nK\n) are drawn randomly and independently from identical uniform distributions on the interval [0,\nA\n]. The drift rate (e.g., \nd\n) or speed of evidence accumulation is drawn independently for each accumulator from a normal distribution with standard deviation \ns\n. Under a self-terminating stopping rule, a response will trigger when the first accumulator reaches the threshold \nb\n.\n\n\n\nDiscuss the LBA Paramaters here...\n\n\n Function f_LBA \n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndrift\n\n\ndouble\n\n\nDrift Rate (d) for the channel accumulator. Higher drift rates result in faster evidence accumulation\n\n\n\n\n\n\nThreshold\n\n\ndouble\n\n\nResponse Threshold (b). Higher threshold results in slower response generation.\n\n\n\n\n\n\nA\n\n\ndouble\n\n\nStart point variability. Maximum value of the uniform distribution U[0,A] between which the drift Start Point may occur\n\n\n\n\n\n\nSD\n\n\ndouble\n\n\nStandard deviation parameter for the normal distribution from which the drift rate is sampled.\n\n\n\n\n\n\nNtrials\n\n\ndouble\n\n\nNumber of trials or Response Times to generate under the given parameter values.\n\n\n\n\n\n\n\n\n Returns \n \nReturns a vector of response time values 1*Ntrials long.\n\n\n Description \n\nCalculates response times in milliseconds, using the Linear Ballistic Accumulator Model. Assumes t0 is zero for all time samples.\n\n\n Example \n \n\n\n% Set LBA Parameters\ndrift = 1.2;\nThreshold = 1;\nA = .50;\nSD = .1;\nNtrials = 10;\n\n% Call f_LBA Function\nRT = f_LBA( drift, Threshold, A, SD, Ntrials )\n\nRT =\n\n  Columns 1 through 7\n\n  510.5766  911.8206  677.4572  716.7259  761.8242  451.3118  512.7615\n\n  Columns 8 through 10\n\n  719.3998  426.9517  876.4842\n\n\n\n\n\n \n \n\n\n \n\nFigure 2.\n Probability density functions for response times generated using the f_LBA function given one-million trials. Columns moving left to right indicate increase parameter values for drift rate (d), threshold (b), start point variability (A), and the standard deviation of the drift (SD). Parameter values increase incrementally as indicated by the text of each subplot. The first row illustrates fixed parameter values for all columns. All response times are generated with the assumption of no error drift rate and a t0 = 0.\n\n\n\nRandom Walk Accumulator\n\n\nDiscuss background of Random Walk here\n\n\n Function f_RandomWalk \n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nProbability\n\n\ndouble\n\n\nProbability of each RW step. Probabilities above 0.5 will on average move towards the positive response threshold, while probabilities below 0.5 will on average step towards the negative response threshold.\n\n\n\n\n\n\nThreshold\n\n\ndouble\n\n\nResponse Threshold (b). Higher threshold results in slower response generation.\n\n\n\n\n\n\nNtrials\n\n\ndouble\n\n\nNumber of Response time trials to generate\n\n\n\n\n\n\nNsamples\n\n\ndouble\n\n\nNumber of Steps sampled for each trial. If Nsamples is less than required to reach a response threshold, a NaN value will be returned indicating no response was made.\n\n\n\n\n\n\n\n\n Returns \n \nReturns a vector of response time values Ntrials long. \n\n\n Description \n\nCalculates response times in milliseconds, using the Random Walk Model.\n\n\n Example \n \n\n\n% Set RW Parameters\nStepProb = .65;\nThreshold = 250;\nNtrials = 10;\nNsamples = 1500;\n\n% Call f_RandomWalk Function\nRT = f_RandomWalk( StepProb, Threshold, Ntrials, Nsamples )\n\nRT =\n\n   982   860   840   850   972   968   862   770   896   740\n\n\n\n\n\n \n \n\n\n \n\nFigure 3.\n Probability density functions for response times generated using the f_RandomWalk function. Columns moving left to right indicate increase parameter values for step probability (p), threshold (b), number of trials (N), and the number of steps sampled for each trial RT (S) . Parameter values increase incrementally as indicated by the text of each subplot, except for Nsamples which decreases. The first row illustrates fixed parameter values for all columns.", 
            "title": "Simulating Data"
        }, 
        {
            "location": "/SFTwMatlab/SimulatingData/#simulating-response-time-data", 
            "text": "", 
            "title": "Simulating Response Time Data"
        }, 
        {
            "location": "/SFTwMatlab/SimulatingData/#linear-balistic-accumulator", 
            "text": "Discuss the LBA here...         Figure 1.  Two Channel version of the Linear Ballistic Accumulator \n(LBA). Evidence for Channel A is gathered in the left hand accumulator, and for Channel B in \nthe right hand accumulator. Starting values for the evidence accumulation process (e.g.,  K ) are drawn randomly and independently from identical uniform distributions on the interval [0, A ]. The drift rate (e.g.,  d ) or speed of evidence accumulation is drawn independently for each accumulator from a normal distribution with standard deviation  s . Under a self-terminating stopping rule, a response will trigger when the first accumulator reaches the threshold  b .  Discuss the LBA Paramaters here...   Function f_LBA      Parameter  Type  Description      drift  double  Drift Rate (d) for the channel accumulator. Higher drift rates result in faster evidence accumulation    Threshold  double  Response Threshold (b). Higher threshold results in slower response generation.    A  double  Start point variability. Maximum value of the uniform distribution U[0,A] between which the drift Start Point may occur    SD  double  Standard deviation parameter for the normal distribution from which the drift rate is sampled.    Ntrials  double  Number of trials or Response Times to generate under the given parameter values.      Returns   \nReturns a vector of response time values 1*Ntrials long.   Description  \nCalculates response times in milliseconds, using the Linear Ballistic Accumulator Model. Assumes t0 is zero for all time samples.   Example     % Set LBA Parameters\ndrift = 1.2;\nThreshold = 1;\nA = .50;\nSD = .1;\nNtrials = 10;\n\n% Call f_LBA Function\nRT = f_LBA( drift, Threshold, A, SD, Ntrials )\n\nRT =\n\n  Columns 1 through 7\n\n  510.5766  911.8206  677.4572  716.7259  761.8242  451.3118  512.7615\n\n  Columns 8 through 10\n\n  719.3998  426.9517  876.4842         Figure 2.  Probability density functions for response times generated using the f_LBA function given one-million trials. Columns moving left to right indicate increase parameter values for drift rate (d), threshold (b), start point variability (A), and the standard deviation of the drift (SD). Parameter values increase incrementally as indicated by the text of each subplot. The first row illustrates fixed parameter values for all columns. All response times are generated with the assumption of no error drift rate and a t0 = 0.", 
            "title": "Linear Balistic Accumulator"
        }, 
        {
            "location": "/SFTwMatlab/SimulatingData/#random-walk-accumulator", 
            "text": "Discuss background of Random Walk here   Function f_RandomWalk      Parameter  Type  Description      Probability  double  Probability of each RW step. Probabilities above 0.5 will on average move towards the positive response threshold, while probabilities below 0.5 will on average step towards the negative response threshold.    Threshold  double  Response Threshold (b). Higher threshold results in slower response generation.    Ntrials  double  Number of Response time trials to generate    Nsamples  double  Number of Steps sampled for each trial. If Nsamples is less than required to reach a response threshold, a NaN value will be returned indicating no response was made.      Returns   \nReturns a vector of response time values Ntrials long.    Description  \nCalculates response times in milliseconds, using the Random Walk Model.   Example     % Set RW Parameters\nStepProb = .65;\nThreshold = 250;\nNtrials = 10;\nNsamples = 1500;\n\n% Call f_RandomWalk Function\nRT = f_RandomWalk( StepProb, Threshold, Ntrials, Nsamples )\n\nRT =\n\n   982   860   840   850   972   968   862   770   896   740         Figure 3.  Probability density functions for response times generated using the f_RandomWalk function. Columns moving left to right indicate increase parameter values for step probability (p), threshold (b), number of trials (N), and the number of steps sampled for each trial RT (S) . Parameter values increase incrementally as indicated by the text of each subplot, except for Nsamples which decreases. The first row illustrates fixed parameter values for all columns.", 
            "title": "Random Walk Accumulator"
        }, 
        {
            "location": "/SFTwMatlab/SimulatingArchitectures/", 
            "text": "Simulating Response Time Channels\n\n\nIn behavioural research, a subject's response time to the onset of an event or stimulus is assumed to act as an index the completion of a cognitive process.\nIn the framework of a Double-Factorial paradigm, response time acts to index the conclusion of a cognitive process. In some instances, this cognitive process might be the result of top-down processing. For example, the decision to apply a minimum-time or exhaustive search strategy, or to manually shift your focus of attention in a serial search. \n\n\nOther times, this strategic cognitive process involves bottom-up processing with non-conscious \n\n\nFor example, in a redundant target task where presence of either target is sufficient to generate a correct 'Yes' response, the strategic cognitive process is to perform a minimum-time search\n\n\nLBA SFT Simulations\n\n\nThe following will show how response time data for varying System Architectures can be simulated using the LBA.\n\n\n f_SimulateSFTnineLBA \n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nModel\n\n\nstring\n\n\nString. Takes values 'SST', 'SSTfo', 'SE', 'PST', 'PE' and 'CoAct'.\n\n\n\n\n\n\nDriftH\n\n\ndouble\n\n\nDrift rate for the High Salience evidence accumulation channel.\n\n\n\n\n\n\nDriftL\n\n\ndouble\n\n\nDrift rate for the Low Salience evidence accumulation channel.\n\n\n\n\n\n\nThreshold\n\n\ndouble\n\n\nResponse Threshold (b). Higher threshold results in slower response generation.\n\n\n\n\n\n\nA\n\n\ndouble\n\n\nStart point variability. Maximum value of the uniform distribution U[0,A] between which the drift Start Point may occur.\n\n\n\n\n\n\nSD\n\n\ndouble\n\n\nStandard deviation parameter for the normal distribution from which the drift rate is sampled.\n\n\n\n\n\n\nNtrials\n\n\ndouble\n\n\nNumber of trials or Response Times to generate under the given parameter values.\n\n\n\n\n\n\nSSTfoRand\n\n\nboolean\n\n\n[Optional] True/False value. Fixes channel order as channel A first (True) or channel B first (False) for the Serial Self-Terminating fixed-order architecture.\n\n\n\n\n\n\n\n\n Returns \n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nData\n\n\nMatrix\n\n\nAn [Ntrials * 9] array of response times in milliseconds. Each column is a unique combination of load and salience, as described by the double-factorial design required for SFT.\n\n\n\n\n\n\nChannelData\n\n\nMatrix\n\n\nA [2 * Nrials * 4] 3D array of the channel completion times used when generating the response times returned by Data. Rows indicate Channel A and B respectively, columns are a given trial and the third-dimension is the unique load-salience combination of the double-target condition (see description below for ordering).\n\n\n\n\n\n\n\n\n Description \n\nCalculates response times in milliseconds, using the Linear Ballistic Accumulator Model. Assumes t0 is zero for all time samples.\n\n\nReturned Data Array columns match unique combinations of Load and Salience, as described in the Double-Factorial Paradigm necessary for SFT. The 3rd dimension of ChannelData maps to the four Double Target conditions of salience.\n\n\n\n\n\n\n\n\nColumn Number\n\n\nLoad\n\n\nSalience\n\n\nAbbreviation\n\n\n\n\n\n\n\n\n\n\n1\n\n\nDouble Target\n\n\nHigh - High\n\n\nAB HH\n\n\n\n\n\n\n2\n\n\nDouble Target\n\n\nHigh - Low\n\n\nAB HL\n\n\n\n\n\n\n3\n\n\nDouble Target\n\n\nLow - High\n\n\nAB LH\n\n\n\n\n\n\n4\n\n\nDouble Target\n\n\nLow - Low\n\n\nAB LL\n\n\n\n\n\n\n5\n\n\nSingle Target\n\n\nHigh\n\n\nA H\n\n\n\n\n\n\n6\n\n\nSingle Target\n\n\nLow\n\n\nA L\n\n\n\n\n\n\n7\n\n\nSingle Target\n\n\nHigh\n\n\nB H\n\n\n\n\n\n\n8\n\n\nSingle Target\n\n\nLow\n\n\nB L\n\n\n\n\n\n\n9\n\n\nNo Target\n\n\nEquates to High Salience\n\n\nNil\n\n\n\n\n\n\n\n\n Example \n\n\nModel = 'PST'; % also takes 'SST', 'SSTfo', 'SE', 'PE', 'CoAct'\nDriftH = 1.6;\nDriftL = 1.2;\nThreshold = 1;\nA = 0;\nSD = .1;\nNtrials =  5;\n\nRTData  = f_SimulateSFTnineLBA( Model, DriftH, DriftL, Threshold, A, SD, Ntrials)\n\nRTData =\n\n  Columns 1 through 7\n\n  613.7729  612.3517  623.1915  856.7324  636.0393  822.2121  704.4101\n  579.7154  641.5054  549.0849  866.4832  604.1681  819.4840  577.7402\n  622.6277  711.6705  649.6865  771.3541  574.1917  871.7915  582.3475\n  657.0529  594.3883  604.1735  829.4403  615.0549  874.6507  580.4431\n  610.9254  630.9346  615.4763  813.0382  719.0946  794.3802  593.0726\n\n  Columns 8 through 9\n\n  851.3901  631.7892\n  938.7937  642.8301\n  838.4938  635.0806\n  924.1590  643.8739\n  728.9819  601.4685\n\n% Returns optional output argument for Channel Response Times\n[RTData, ChannelData]  = f_SimulateSFTnineLBA( Model, DriftH, DriftL, Threshold, A, SD, Ntrials);\nChannelData\n\n\nChannelData(:,:,1) =\n\n  621.0754  695.5822  711.1573  657.0529  610.9254\n  613.7729  579.7154  622.6277  662.7162  671.8474\n\n\nChannelData(:,:,2) =\n\n  612.3517  641.5054  711.6705  594.3883  630.9346\n  984.0588  810.8489  743.0004  752.8701  857.2904\n\n\nChannelData(:,:,3) =\n\n  942.1947  796.9356  818.8018  949.7159  788.6477\n  623.1915  549.0849  649.6865  604.1735  615.4763\n\n\nChannelData(:,:,4) =\n\n   1.0e+03 *\n\n    0.8567    0.8932    0.7714    0.9584    0.8130\n    0.9304    0.8665    1.0846    0.8294    0.9580\n\n\n\n\n\nRandom Walk SFT Simulations\n\n\nThe following will show how response time data for varying System Architectures can be simulated using the Random Walk Model.\n\n\n f_SimulateSFTnineRW \n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nModel\n\n\nstring\n\n\nString. Takes values 'SST', 'SSTfo', 'SE', 'PST', 'PE' and 'CoAct'.\n\n\n\n\n\n\nProbH\n\n\ndouble\n\n\nStep Probability for the high salience condition.\n\n\n\n\n\n\nProbL\n\n\ndouble\n\n\nStep Probability for the low salience condition.\n\n\n\n\n\n\nThreshold\n\n\ndouble\n\n\nResponse Threshold (b). Higher threshold results in slower response generation.\n\n\n\n\n\n\nNtrials\n\n\ndouble\n\n\nNumber of trials or Response Times to generate under the given parameter values.\n\n\n\n\n\n\nNsamples\n\n\ndouble\n\n\nNumber of step samples to be taken on each trial. Failure to reach a response threshold by Nsamples returns a no response NaN.\n\n\n\n\n\n\n\n\n Returns \n \n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nData\n\n\nArray\n\n\n2D matrix with dimensions [ Ntrials * 9 ]. The nine columns constitute unique combinations of Load and Salience conditions within the Double Factorial Paradigm. See description below. Negative values typically indicate an incorrect response (the opposing decision bound was met), NaN values indicate no-response and positive values indicate a correct response.\n\n\n\n\n\n\nChannelData\n\n\nArray\n\n\nA [2 * Nrials * 4] 3D array of the channel completion times used when generating the response times returned by Data. Rows indicate Channel A and B respectively, columns are a given trial and the third-dimension is the unique load-salience combination of the double-target condition (see description below for ordering).\n\n\n\n\n\n\n\n\n Description \n\nCalculates response times in milliseconds for the nine unique conditions that constitute the classical SFT double factorial paradigm, using the Linear Ballistic Accumulator Model. Assumes t0 is zero for all time samples.\n\n\nReturned Data Array columns match unique combinations of Load and Salience, as described in the Double-Factorial Paradigm necessary for SFT.\n\n\n\n\n\n\n\n\nColumn Number\n\n\nLoad\n\n\nSalience\n\n\nAbbreviation\n\n\n\n\n\n\n\n\n\n\n1\n\n\nDouble Target\n\n\nHigh - High\n\n\nAB HH\n\n\n\n\n\n\n2\n\n\nDouble Target\n\n\nHigh - Low\n\n\nAB HL\n\n\n\n\n\n\n3\n\n\nDouble Target\n\n\nLow - High\n\n\nAB LH\n\n\n\n\n\n\n4\n\n\nDouble Target\n\n\nLow - Low\n\n\nAB LL\n\n\n\n\n\n\n5\n\n\nSingle Target\n\n\nHigh\n\n\nA H\n\n\n\n\n\n\n6\n\n\nSingle Target\n\n\nLow\n\n\nA L\n\n\n\n\n\n\n7\n\n\nSingle Target\n\n\nHigh\n\n\nB H\n\n\n\n\n\n\n8\n\n\nSingle Target\n\n\nLow\n\n\nB L\n\n\n\n\n\n\n9\n\n\nNo Target\n\n\nEquates to High Salience\n\n\nNil\n\n\n\n\n\n\n\n\n Example \n\n\n% Set Model and RW Parameter Values\nProbH = .7;\nProbL = .6;\nThreshold = 20;\nNtrials = 5;\nNsamples = 250;\n\n% Call Function\nRTData = f_SimulateSFTnineRW( Model, ProbH, ProbL, Threshold, Ntrials, Nsamples )\n\nRTData =\n\n    56    76    32    64    44   112    56    56    38\n    34    50    40    74    36    76    62    74    64\n    42    38    42    60    32   208    50    72    26\n    34    32    36    40    30    76    28    98    72\n    38    34    42    76    36   112    48   112    44\n\n% Also takes optional output arguments to return the Channel Response Times\n[RTData, ChannelData] = f_SimulateSFTnineRW( Model, ProbH, ProbL, Threshold, Ntrials, Nsamples );\n\nChannelData\n\nChannelData(:,:,1) =\n\n    56    38    42    40    46\n    58    34    48    34    38\n\n\nChannelData(:,:,2) =\n\n    76    50    38    32    34\n   108   226    88    46    74\n\n\nChannelData(:,:,3) =\n\n    32    48    50   118    64\n    52    40    42    36    42\n\n\nChannelData(:,:,4) =\n\n    64    74    94    88    98\n    70    90    60    40    76\n\n\n\n\n\nSimulated System Architectures\n\n\n Parallel Self Terminating \n\n\ntimebins = 1:10:1500;\n\nRTData  = f_SimulateSFTnineLBA( 'PST', 1.6, 1.2, 1, 0, .2, 100000);\n\n[SIC, bootstrap, dhat] = f_SIC(RTData(:,1:4), timebins, true, true );\n\nf_PlotSIC( SIC, timebins, bootstrap, dhat, 'Parallel Self Terminating SIC', true );\n\n\n\n\n\n \n \n\n\n Parallel Exhaustive \n\n\ntimebins = 1:10:1500;\n\nRTData  = f_SimulateSFTnineLBA( 'PE', 1.6, 1.2, 1, 0, .2, 100000);\n\n[SIC, bootstrap, dhat] = f_SIC(RTData(:,1:4), timebins, true, true );\n\nf_PlotSIC( SIC, timebins, bootstrap, dhat, 'Parallel Exhaustive', true );\n\n\n\n\n \n \n\n\n Serial Self Terminating \n\n\ntimebins = 1:10:1500;\n\nRTData  = f_SimulateSFTnineLBA( 'SST', 1.6, 1.2, 1, 0, .2, 100000);\n\n[SIC, bootstrap, dhat] = f_SIC(RTData(:,1:4), timebins, true, true );\n\nf_PlotSIC( SIC, timebins, bootstrap, dhat, 'Serial Self Terminating', true );\n\n\n\n\n\n \n \n\n\n Fixed Order Serial Self-Terminating \n\n\ntimebins = 1:10:1500;\n\nRTData  = f_SimulateSFTnineLBA( 'SSTfo', 1.6, 1.2, 1, 0, .2, 100000);\n\n[SIC, bootstrap, dhat] = f_SIC(RTData(:,1:4), timebins, true, true );\n\nf_PlotSIC( SIC, timebins, bootstrap, dhat, 'Fixed Order Serial Self Terminating', true );\n\n\n\n\n\n \n \n\n\n Serial Exhaustive \n\n\ntimebins = 1:10:3000;\n\nRTData  = f_SimulateSFTnineLBA( 'SE', 1.6, 1.2, 1, 0, .2, 100000);\n\n[SIC, bootstrap, dhat] = f_SIC(RTData(:,1:4), timebins, true, true );\n\nf_PlotSIC( SIC, timebins, bootstrap, dhat, 'Serial Exhaustive', true );\n\n\n\n\n\n \n \n\n\n Parallel Coactive \n\n\ntimebins = 1:10:1500;\n\nRTData  = f_SimulateSFTnineLBA( 'CoAct', 1.6, 1.2, 1, 0, .2, 100000);\n\n[SIC, bootstrap, dhat] = f_SIC(RTData(:,1:4), timebins, true, true );\n\nf_PlotSIC( SIC, timebins, bootstrap, dhat, 'Coactive', true );", 
            "title": "Simulating Architectures"
        }, 
        {
            "location": "/SFTwMatlab/SimulatingArchitectures/#simulating-response-time-channels", 
            "text": "In behavioural research, a subject's response time to the onset of an event or stimulus is assumed to act as an index the completion of a cognitive process.\nIn the framework of a Double-Factorial paradigm, response time acts to index the conclusion of a cognitive process. In some instances, this cognitive process might be the result of top-down processing. For example, the decision to apply a minimum-time or exhaustive search strategy, or to manually shift your focus of attention in a serial search.   Other times, this strategic cognitive process involves bottom-up processing with non-conscious   For example, in a redundant target task where presence of either target is sufficient to generate a correct 'Yes' response, the strategic cognitive process is to perform a minimum-time search", 
            "title": "Simulating Response Time Channels"
        }, 
        {
            "location": "/SFTwMatlab/SimulatingArchitectures/#lba-sft-simulations", 
            "text": "The following will show how response time data for varying System Architectures can be simulated using the LBA.   f_SimulateSFTnineLBA      Parameter  Type  Description      Model  string  String. Takes values 'SST', 'SSTfo', 'SE', 'PST', 'PE' and 'CoAct'.    DriftH  double  Drift rate for the High Salience evidence accumulation channel.    DriftL  double  Drift rate for the Low Salience evidence accumulation channel.    Threshold  double  Response Threshold (b). Higher threshold results in slower response generation.    A  double  Start point variability. Maximum value of the uniform distribution U[0,A] between which the drift Start Point may occur.    SD  double  Standard deviation parameter for the normal distribution from which the drift rate is sampled.    Ntrials  double  Number of trials or Response Times to generate under the given parameter values.    SSTfoRand  boolean  [Optional] True/False value. Fixes channel order as channel A first (True) or channel B first (False) for the Serial Self-Terminating fixed-order architecture.      Returns      Parameter  Type  Description      Data  Matrix  An [Ntrials * 9] array of response times in milliseconds. Each column is a unique combination of load and salience, as described by the double-factorial design required for SFT.    ChannelData  Matrix  A [2 * Nrials * 4] 3D array of the channel completion times used when generating the response times returned by Data. Rows indicate Channel A and B respectively, columns are a given trial and the third-dimension is the unique load-salience combination of the double-target condition (see description below for ordering).      Description  \nCalculates response times in milliseconds, using the Linear Ballistic Accumulator Model. Assumes t0 is zero for all time samples.  Returned Data Array columns match unique combinations of Load and Salience, as described in the Double-Factorial Paradigm necessary for SFT. The 3rd dimension of ChannelData maps to the four Double Target conditions of salience.     Column Number  Load  Salience  Abbreviation      1  Double Target  High - High  AB HH    2  Double Target  High - Low  AB HL    3  Double Target  Low - High  AB LH    4  Double Target  Low - Low  AB LL    5  Single Target  High  A H    6  Single Target  Low  A L    7  Single Target  High  B H    8  Single Target  Low  B L    9  No Target  Equates to High Salience  Nil      Example   Model = 'PST'; % also takes 'SST', 'SSTfo', 'SE', 'PE', 'CoAct'\nDriftH = 1.6;\nDriftL = 1.2;\nThreshold = 1;\nA = 0;\nSD = .1;\nNtrials =  5;\n\nRTData  = f_SimulateSFTnineLBA( Model, DriftH, DriftL, Threshold, A, SD, Ntrials)\n\nRTData =\n\n  Columns 1 through 7\n\n  613.7729  612.3517  623.1915  856.7324  636.0393  822.2121  704.4101\n  579.7154  641.5054  549.0849  866.4832  604.1681  819.4840  577.7402\n  622.6277  711.6705  649.6865  771.3541  574.1917  871.7915  582.3475\n  657.0529  594.3883  604.1735  829.4403  615.0549  874.6507  580.4431\n  610.9254  630.9346  615.4763  813.0382  719.0946  794.3802  593.0726\n\n  Columns 8 through 9\n\n  851.3901  631.7892\n  938.7937  642.8301\n  838.4938  635.0806\n  924.1590  643.8739\n  728.9819  601.4685\n\n% Returns optional output argument for Channel Response Times\n[RTData, ChannelData]  = f_SimulateSFTnineLBA( Model, DriftH, DriftL, Threshold, A, SD, Ntrials);\nChannelData\n\n\nChannelData(:,:,1) =\n\n  621.0754  695.5822  711.1573  657.0529  610.9254\n  613.7729  579.7154  622.6277  662.7162  671.8474\n\n\nChannelData(:,:,2) =\n\n  612.3517  641.5054  711.6705  594.3883  630.9346\n  984.0588  810.8489  743.0004  752.8701  857.2904\n\n\nChannelData(:,:,3) =\n\n  942.1947  796.9356  818.8018  949.7159  788.6477\n  623.1915  549.0849  649.6865  604.1735  615.4763\n\n\nChannelData(:,:,4) =\n\n   1.0e+03 *\n\n    0.8567    0.8932    0.7714    0.9584    0.8130\n    0.9304    0.8665    1.0846    0.8294    0.9580", 
            "title": "LBA SFT Simulations"
        }, 
        {
            "location": "/SFTwMatlab/SimulatingArchitectures/#random-walk-sft-simulations", 
            "text": "The following will show how response time data for varying System Architectures can be simulated using the Random Walk Model.   f_SimulateSFTnineRW      Parameter  Type  Description      Model  string  String. Takes values 'SST', 'SSTfo', 'SE', 'PST', 'PE' and 'CoAct'.    ProbH  double  Step Probability for the high salience condition.    ProbL  double  Step Probability for the low salience condition.    Threshold  double  Response Threshold (b). Higher threshold results in slower response generation.    Ntrials  double  Number of trials or Response Times to generate under the given parameter values.    Nsamples  double  Number of step samples to be taken on each trial. Failure to reach a response threshold by Nsamples returns a no response NaN.      Returns        Parameter  Type  Description      Data  Array  2D matrix with dimensions [ Ntrials * 9 ]. The nine columns constitute unique combinations of Load and Salience conditions within the Double Factorial Paradigm. See description below. Negative values typically indicate an incorrect response (the opposing decision bound was met), NaN values indicate no-response and positive values indicate a correct response.    ChannelData  Array  A [2 * Nrials * 4] 3D array of the channel completion times used when generating the response times returned by Data. Rows indicate Channel A and B respectively, columns are a given trial and the third-dimension is the unique load-salience combination of the double-target condition (see description below for ordering).      Description  \nCalculates response times in milliseconds for the nine unique conditions that constitute the classical SFT double factorial paradigm, using the Linear Ballistic Accumulator Model. Assumes t0 is zero for all time samples.  Returned Data Array columns match unique combinations of Load and Salience, as described in the Double-Factorial Paradigm necessary for SFT.     Column Number  Load  Salience  Abbreviation      1  Double Target  High - High  AB HH    2  Double Target  High - Low  AB HL    3  Double Target  Low - High  AB LH    4  Double Target  Low - Low  AB LL    5  Single Target  High  A H    6  Single Target  Low  A L    7  Single Target  High  B H    8  Single Target  Low  B L    9  No Target  Equates to High Salience  Nil      Example   % Set Model and RW Parameter Values\nProbH = .7;\nProbL = .6;\nThreshold = 20;\nNtrials = 5;\nNsamples = 250;\n\n% Call Function\nRTData = f_SimulateSFTnineRW( Model, ProbH, ProbL, Threshold, Ntrials, Nsamples )\n\nRTData =\n\n    56    76    32    64    44   112    56    56    38\n    34    50    40    74    36    76    62    74    64\n    42    38    42    60    32   208    50    72    26\n    34    32    36    40    30    76    28    98    72\n    38    34    42    76    36   112    48   112    44\n\n% Also takes optional output arguments to return the Channel Response Times\n[RTData, ChannelData] = f_SimulateSFTnineRW( Model, ProbH, ProbL, Threshold, Ntrials, Nsamples );\n\nChannelData\n\nChannelData(:,:,1) =\n\n    56    38    42    40    46\n    58    34    48    34    38\n\n\nChannelData(:,:,2) =\n\n    76    50    38    32    34\n   108   226    88    46    74\n\n\nChannelData(:,:,3) =\n\n    32    48    50   118    64\n    52    40    42    36    42\n\n\nChannelData(:,:,4) =\n\n    64    74    94    88    98\n    70    90    60    40    76", 
            "title": "Random Walk SFT Simulations"
        }, 
        {
            "location": "/SFTwMatlab/SimulatingArchitectures/#simulated-system-architectures", 
            "text": "Parallel Self Terminating   timebins = 1:10:1500;\n\nRTData  = f_SimulateSFTnineLBA( 'PST', 1.6, 1.2, 1, 0, .2, 100000);\n\n[SIC, bootstrap, dhat] = f_SIC(RTData(:,1:4), timebins, true, true );\n\nf_PlotSIC( SIC, timebins, bootstrap, dhat, 'Parallel Self Terminating SIC', true );        Parallel Exhaustive   timebins = 1:10:1500;\n\nRTData  = f_SimulateSFTnineLBA( 'PE', 1.6, 1.2, 1, 0, .2, 100000);\n\n[SIC, bootstrap, dhat] = f_SIC(RTData(:,1:4), timebins, true, true );\n\nf_PlotSIC( SIC, timebins, bootstrap, dhat, 'Parallel Exhaustive', true );        Serial Self Terminating   timebins = 1:10:1500;\n\nRTData  = f_SimulateSFTnineLBA( 'SST', 1.6, 1.2, 1, 0, .2, 100000);\n\n[SIC, bootstrap, dhat] = f_SIC(RTData(:,1:4), timebins, true, true );\n\nf_PlotSIC( SIC, timebins, bootstrap, dhat, 'Serial Self Terminating', true );        Fixed Order Serial Self-Terminating   timebins = 1:10:1500;\n\nRTData  = f_SimulateSFTnineLBA( 'SSTfo', 1.6, 1.2, 1, 0, .2, 100000);\n\n[SIC, bootstrap, dhat] = f_SIC(RTData(:,1:4), timebins, true, true );\n\nf_PlotSIC( SIC, timebins, bootstrap, dhat, 'Fixed Order Serial Self Terminating', true );        Serial Exhaustive   timebins = 1:10:3000;\n\nRTData  = f_SimulateSFTnineLBA( 'SE', 1.6, 1.2, 1, 0, .2, 100000);\n\n[SIC, bootstrap, dhat] = f_SIC(RTData(:,1:4), timebins, true, true );\n\nf_PlotSIC( SIC, timebins, bootstrap, dhat, 'Serial Exhaustive', true );        Parallel Coactive   timebins = 1:10:1500;\n\nRTData  = f_SimulateSFTnineLBA( 'CoAct', 1.6, 1.2, 1, 0, .2, 100000);\n\n[SIC, bootstrap, dhat] = f_SIC(RTData(:,1:4), timebins, true, true );\n\nf_PlotSIC( SIC, timebins, bootstrap, dhat, 'Coactive', true );", 
            "title": "Simulated System Architectures"
        }, 
        {
            "location": "/SFTwMatlab/AssessingArchitecture/", 
            "text": "Selective Influence\n\n\nMean Interaction Contrast (MIC)\n\n\nSurvivor Interaction Contrast (SIC)\n\n\nD` Statistic\n\n\nThe  D statistic is a non-parametric test for assessing the empirical SIC(t)'s departure from zero (Houpt \n Townsend, 2010). The D statistic is calculated for both the maximum and minimum points of the empirical SIC(t), giving a D+ and D- statistic. \n\n\nThe D statistic utilises comparison of the SIC(t) to the maximum and minimum value of a Brownian Bridge, a stochastic process occurring over time with pdf drawn from the conditional probability of a Wiener process with start (t=0) and end points (t=T) anchored at zero and uncertainty greatest in the middle of the distribution. As such, interpretation of the D statistic should be understood as D+ denoting the largest positive value of a Brownian Bridge and D- the magnitude of the smallest value. \n\n\nGiven the D statistic's calculation from a Brownian Bridge, a null hypothesis test can be ascertained with the null assuming the maximum SIC(t) positive and negative inflection resulting from the uncertainty of the underlying Brownian Bridge. \n\n\nThe D statistic should be interpreted in conjunction with the MIC, as the presence of a D statistic alone is only weak evidence against the null (Houpt \n Townsend, 2010).\n\n\nD-Hat vs MIC Significance Testing\n\n\n\n\n Parallel Exhaustive \n\n\n \n \n\n\n Figure \n \n\n\n Theoretical Expectations \n\n\n\n\n\n\n\n\nMeasure\n\n\nExpect Significance\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nMIC (mean)\n\n\n\n\nMIC should be negative\n\n\n\n\n\n\nMIC Interaction\n\n\nTrue\n\n\nMIC Interaction should be significant. Hallmark of Parallel Processing\n\n\n\n\n\n\nD+\n\n\nFalse\n\n\nNo significant positive deviation should be observed. See above SIC figure.\n\n\n\n\n\n\nD-\n\n\nTrue\n\n\nA significant negative deviation should be observed.\n\n\n\n\n\n\n\n\n Simulated Observations - Dhat vs MIC \n\n\n \n \n\n\n \n \n\n\n \n \n\n\n \n \n\n\n Simulated Observations - Corresponding SICs \n\n\n \n \n\n\n \n \n\n\n \n \n\n\n \n \n\n\n\n\n Parallel Self Terminating \n\n\n \n \n\n\n Figure \n \n\n\n Theoretical Expectations \n\n\n\n\n\n\n\n\nMeasure\n\n\nExpect Significance\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nMIC (mean)\n\n\n\n\nMIC should be positive\n\n\n\n\n\n\nMIC Interaction\n\n\nTrue\n\n\nMIC Interaction should be significant. Hallmark of Parallel Processing\n\n\n\n\n\n\nD+\n\n\nTrue\n\n\nA significant positive deviation should be observed. See above SIC figure.\n\n\n\n\n\n\nD-\n\n\nFalse\n\n\nNo significant negative deviation should be observed.\n\n\n\n\n\n\n\n\n Simulated Observations - Dhat vs MIC \n\n\n \n \n\n\n \n \n\n\n \n \n\n\n \n \n\n\n Simulated Observations - Corresponding SICs \n\n\n \n \n\n\n \n \n\n\n \n \n\n\n \n \n\n\n\n\n Serial Exhaustive \n\n\n \n \n\n\n Figure \n \n\n\n Theoretical Expectations \n\n\n\n\n\n\n\n\nMeasure\n\n\nExpect Significance\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nMIC (mean)\n\n\n\n\nMIC should be equal to zero\n\n\n\n\n\n\nMIC Interaction\n\n\nFalse\n\n\nMIC Interaction should not be significant.\n\n\n\n\n\n\nD+\n\n\nTrue\n\n\nA significant positive deviation should be observed. See above SIC figure.\n\n\n\n\n\n\nD-\n\n\nTrue\n\n\nA significant negative deviation should be observed.\n\n\n\n\n\n\n\n\n Simulated Observations - Dhat vs MIC \n\n\n \n \n\n\n \n \n\n\n \n \n\n\n \n \n\n\n Simulated Observations - Corresponding SICs \n\n\n \n \n\n\n \n \n\n\n \n \n\n\n \n \n\n\n\n\n Serial Self Terminating \n\n\n \n \n\n\n Figure \n \n\n\n Theoretical Expectations \n\n\n\n\n\n\n\n\nMeasure\n\n\nExpect Significance\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nMIC (mean)\n\n\n\n\nMIC should be equal to zero\n\n\n\n\n\n\nMIC Interaction\n\n\nFalse\n\n\nMIC Interaction should not be significant.\n\n\n\n\n\n\nD+\n\n\nFalse\n\n\nNo significant positive deviation should be observed.\n\n\n\n\n\n\nD-\n\n\nFalse\n\n\nNo significant negative deviation should be observed. See above SIC figure.\n\n\n\n\n\n\n\n\n Simulated Observations - Dhat vs MIC \n\n\n \n \n\n\n \n \n\n\n \n \n\n\n \n \n\n\n Simulated Observations - Corresponding SICs", 
            "title": "Assessing Architecture"
        }, 
        {
            "location": "/SFTwMatlab/AssessingArchitecture/#selective-influence", 
            "text": "", 
            "title": "Selective Influence"
        }, 
        {
            "location": "/SFTwMatlab/AssessingArchitecture/#mean-interaction-contrast-mic", 
            "text": "", 
            "title": "Mean Interaction Contrast (MIC)"
        }, 
        {
            "location": "/SFTwMatlab/AssessingArchitecture/#survivor-interaction-contrast-sic", 
            "text": "", 
            "title": "Survivor Interaction Contrast (SIC)"
        }, 
        {
            "location": "/SFTwMatlab/AssessingArchitecture/#d-statistic", 
            "text": "The  D statistic is a non-parametric test for assessing the empirical SIC(t)'s departure from zero (Houpt   Townsend, 2010). The D statistic is calculated for both the maximum and minimum points of the empirical SIC(t), giving a D+ and D- statistic.   The D statistic utilises comparison of the SIC(t) to the maximum and minimum value of a Brownian Bridge, a stochastic process occurring over time with pdf drawn from the conditional probability of a Wiener process with start (t=0) and end points (t=T) anchored at zero and uncertainty greatest in the middle of the distribution. As such, interpretation of the D statistic should be understood as D+ denoting the largest positive value of a Brownian Bridge and D- the magnitude of the smallest value.   Given the D statistic's calculation from a Brownian Bridge, a null hypothesis test can be ascertained with the null assuming the maximum SIC(t) positive and negative inflection resulting from the uncertainty of the underlying Brownian Bridge.   The D statistic should be interpreted in conjunction with the MIC, as the presence of a D statistic alone is only weak evidence against the null (Houpt   Townsend, 2010).", 
            "title": "D` Statistic"
        }, 
        {
            "location": "/SFTwMatlab/AssessingArchitecture/#d-hat-vs-mic-significance-testing", 
            "text": "Parallel Exhaustive         Figure      Theoretical Expectations      Measure  Expect Significance  Description      MIC (mean)   MIC should be negative    MIC Interaction  True  MIC Interaction should be significant. Hallmark of Parallel Processing    D+  False  No significant positive deviation should be observed. See above SIC figure.    D-  True  A significant negative deviation should be observed.      Simulated Observations - Dhat vs MIC                        Simulated Observations - Corresponding SICs                         Parallel Self Terminating         Figure      Theoretical Expectations      Measure  Expect Significance  Description      MIC (mean)   MIC should be positive    MIC Interaction  True  MIC Interaction should be significant. Hallmark of Parallel Processing    D+  True  A significant positive deviation should be observed. See above SIC figure.    D-  False  No significant negative deviation should be observed.      Simulated Observations - Dhat vs MIC                        Simulated Observations - Corresponding SICs                         Serial Exhaustive         Figure      Theoretical Expectations      Measure  Expect Significance  Description      MIC (mean)   MIC should be equal to zero    MIC Interaction  False  MIC Interaction should not be significant.    D+  True  A significant positive deviation should be observed. See above SIC figure.    D-  True  A significant negative deviation should be observed.      Simulated Observations - Dhat vs MIC                        Simulated Observations - Corresponding SICs                         Serial Self Terminating         Figure      Theoretical Expectations      Measure  Expect Significance  Description      MIC (mean)   MIC should be equal to zero    MIC Interaction  False  MIC Interaction should not be significant.    D+  False  No significant positive deviation should be observed.    D-  False  No significant negative deviation should be observed. See above SIC figure.      Simulated Observations - Dhat vs MIC                        Simulated Observations - Corresponding SICs", 
            "title": "D-Hat vs MIC Significance Testing"
        }, 
        {
            "location": "/SFTwMatlab/AssessingCapacity/", 
            "text": "Assessing Capacity\n\n\nRedundant Target Effect\n\n\nCapacity Coefficient OR\n\n\nCapacity Coefficient AND", 
            "title": "Assessing Capacity"
        }, 
        {
            "location": "/SFTwMatlab/AssessingCapacity/#assessing-capacity", 
            "text": "", 
            "title": "Assessing Capacity"
        }, 
        {
            "location": "/SFTwMatlab/AssessingCapacity/#redundant-target-effect", 
            "text": "", 
            "title": "Redundant Target Effect"
        }, 
        {
            "location": "/SFTwMatlab/AssessingCapacity/#capacity-coefficient-or", 
            "text": "", 
            "title": "Capacity Coefficient OR"
        }, 
        {
            "location": "/SFTwMatlab/AssessingCapacity/#capacity-coefficient-and", 
            "text": "", 
            "title": "Capacity Coefficient AND"
        }, 
        {
            "location": "/systemsofnumericalcognition/", 
            "text": "Systems of Subitizing\n\n\nSystems of Estimation\n\n\nExact Report vs. Comparative Judgements\n\n\nDecimal Systems of Cognition", 
            "title": "Systems of Numerical Cognition"
        }, 
        {
            "location": "/systemsofnumericalcognition/#systems-of-subitizing", 
            "text": "", 
            "title": "Systems of Subitizing"
        }, 
        {
            "location": "/systemsofnumericalcognition/#systems-of-estimation", 
            "text": "", 
            "title": "Systems of Estimation"
        }, 
        {
            "location": "/systemsofnumericalcognition/#exact-report-vs-comparative-judgements", 
            "text": "", 
            "title": "Exact Report vs. Comparative Judgements"
        }, 
        {
            "location": "/systemsofnumericalcognition/#decimal-systems-of-cognition", 
            "text": "", 
            "title": "Decimal Systems of Cognition"
        }, 
        {
            "location": "/ErrorsInSFT/", 
            "text": "Diagnosing Channel Errors in Parallel Systems\n\n\nDiagnosing Channel Errors in Serial Systems", 
            "title": "Assessing System Errors"
        }, 
        {
            "location": "/ErrorsInSFT/#diagnosing-channel-errors-in-parallel-systems", 
            "text": "", 
            "title": "Diagnosing Channel Errors in Parallel Systems"
        }, 
        {
            "location": "/ErrorsInSFT/#diagnosing-channel-errors-in-serial-systems", 
            "text": "", 
            "title": "Diagnosing Channel Errors in Serial Systems"
        }, 
        {
            "location": "/breakingtherules/", 
            "text": "Mixtures of Architecture\n\n\nTesting Testing 1 2 3 4\n\n\nMixtures of Stopping Rule", 
            "title": "Breaking the Rules"
        }, 
        {
            "location": "/breakingtherules/#mixtures-of-architecture", 
            "text": "Testing Testing 1 2 3 4", 
            "title": "Mixtures of Architecture"
        }, 
        {
            "location": "/breakingtherules/#mixtures-of-stopping-rule", 
            "text": "", 
            "title": "Mixtures of Stopping Rule"
        }, 
        {
            "location": "/neuralcorrelatesofcognition/", 
            "text": "Parallel and Serial Systems on the Brain", 
            "title": "The Neural Correlates of Cognition"
        }, 
        {
            "location": "/neuralcorrelatesofcognition/#parallel-and-serial-systems-on-the-brain", 
            "text": "", 
            "title": "Parallel and Serial Systems on the Brain"
        }, 
        {
            "location": "/support/", 
            "text": "Contact and Support\n\n\nAll code, text and images in the current document\nhave been made by Paul Garrett, a PhD Candidate\nat the University of Newcastle, Australia.\n\n\nTo get in contact with Paul Garrett,\nplease email him at paul.garrett@uon.edu.au or at\npaulgarrett2016@gmail.com.\n\n\nTo cite the SFT with Matlab package, please use the following:\n\n\nGarrett, P. M., 2017. Systems Factorial Technology with Matlab. Unpublished manuscript.", 
            "title": "Contact and Support"
        }, 
        {
            "location": "/support/#contact-and-support", 
            "text": "All code, text and images in the current document\nhave been made by Paul Garrett, a PhD Candidate\nat the University of Newcastle, Australia.  To get in contact with Paul Garrett,\nplease email him at paul.garrett@uon.edu.au or at\npaulgarrett2016@gmail.com.  To cite the SFT with Matlab package, please use the following:  Garrett, P. M., 2017. Systems Factorial Technology with Matlab. Unpublished manuscript.", 
            "title": "Contact and Support"
        }, 
        {
            "location": "/", 
            "text": "Commands\n\n\n\n\nmkdocs new [dir-name]\n - Create a new project.\n\n\nmkdocs serve\n - Start the live-reloading docs server.\n\n\nmkdocs build\n - Build the documentation site.\n\n\nmkdocs help\n - Print this help message.\n\n\n\n\nSFT Mkdocs Layout\n\n\nmkdocs.yml    # The configuration file.\nmarkdown_docs/\n    introduction.md # Intro to SFT Package\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n\n\n\nFor full documentation on Makedocs visit \nmkdocs.org\n.", 
            "title": "Help"
        }, 
        {
            "location": "/#commands", 
            "text": "mkdocs new [dir-name]  - Create a new project.  mkdocs serve  - Start the live-reloading docs server.  mkdocs build  - Build the documentation site.  mkdocs help  - Print this help message.", 
            "title": "Commands"
        }, 
        {
            "location": "/#sft-mkdocs-layout", 
            "text": "mkdocs.yml    # The configuration file.\nmarkdown_docs/\n    introduction.md # Intro to SFT Package\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.  For full documentation on Makedocs visit  mkdocs.org .", 
            "title": "SFT Mkdocs Layout"
        }, 
        {
            "location": "/References/", 
            "text": "References\n\n\nTownsend, J. (1971). \nA note on the identifiability of parallel and serial processes\n).\n\nPerception and psychophysics\n. \n10\n (3), 161-163", 
            "title": "References"
        }, 
        {
            "location": "/References/#references", 
            "text": "Townsend, J. (1971).  A note on the identifiability of parallel and serial processes ). Perception and psychophysics .  10  (3), 161-163", 
            "title": "References"
        }, 
        {
            "location": "/Publications/", 
            "text": "Publications\n\n\nGarrett, P. M.\n, Landy, D., Houpt, J. W., \n Eidles, A. Estimation systems perform under severly limited capacity. \nIn preparation\n.\n\n\nDennis, S., Yim, H., \nGarrett, P. M.\n, Sreekumar, V., \n Stone, B. (2018). Privacy vs open science. \nBehavioural research methods (in submission)\n.\n\n\nDennis, S., \nGarrett, P. M.\n, Yim, H., Hamm, J., Osth, A., Sreekumar, V., \n Stone, B. (2018). A system for collecting active and passive experience sampling data. \nBehavioural research methods (in submission)\n.\n\n\nLittle, D. R., Eidles, A., Houpt, J. W., \nGarrett P. M.\n, \n Griffiths, D. W. (2018). Systems Factorial Technology analysis of mixture models. \nJournal of mathematical psychology (in submission)\n.\n\n\nYim, H., \nGarrett, P. M.\n, Baker, M., \n Dennis, S. (2018). Examining the independence of scales in episodic memory using experience sampling data. \nProceedings of the 40th Annual Conference of the Cognitive Science Society (in submission)\n.\n\n\nDennis, S., Yim, H., Sreekumar, V., Evans. N., \nGarrett, P.M.\n, \n Sederberg, P. (2017). \nA hierarchical Bayesian model of \"memory for when\" based on experience sampling data\n. \nProceedings of the 39th Annual Conference of the Cognitive Science Society\n.\n\n\nTillman, G., Howard, Z., \nGarrett, P.M.\n, \n Eidels, A. (2017). \nThe Stroop Effect From a Mixture of Reading Processes: A Fixed-Point Analysis\n. \nProceedings of the 39th Annual Conference of the Cognitive Science Society\n.\n\n\nCooper, P.S., \nGarrett P.M.\n, Rennie J.L. \n Karayanidis F. (2015) \nTask Uncertainty Can Account for Mixing and Switch Costs in Task-Switching\n. \nPLoS ONE\n. 10(6).", 
            "title": "Publications"
        }, 
        {
            "location": "/Publications/#publications", 
            "text": "Garrett, P. M. , Landy, D., Houpt, J. W.,   Eidles, A. Estimation systems perform under severly limited capacity.  In preparation .  Dennis, S., Yim, H.,  Garrett, P. M. , Sreekumar, V.,   Stone, B. (2018). Privacy vs open science.  Behavioural research methods (in submission) .  Dennis, S.,  Garrett, P. M. , Yim, H., Hamm, J., Osth, A., Sreekumar, V.,   Stone, B. (2018). A system for collecting active and passive experience sampling data.  Behavioural research methods (in submission) .  Little, D. R., Eidles, A., Houpt, J. W.,  Garrett P. M. ,   Griffiths, D. W. (2018). Systems Factorial Technology analysis of mixture models.  Journal of mathematical psychology (in submission) .  Yim, H.,  Garrett, P. M. , Baker, M.,   Dennis, S. (2018). Examining the independence of scales in episodic memory using experience sampling data.  Proceedings of the 40th Annual Conference of the Cognitive Science Society (in submission) .  Dennis, S., Yim, H., Sreekumar, V., Evans. N.,  Garrett, P.M. ,   Sederberg, P. (2017).  A hierarchical Bayesian model of \"memory for when\" based on experience sampling data .  Proceedings of the 39th Annual Conference of the Cognitive Science Society .  Tillman, G., Howard, Z.,  Garrett, P.M. ,   Eidels, A. (2017).  The Stroop Effect From a Mixture of Reading Processes: A Fixed-Point Analysis .  Proceedings of the 39th Annual Conference of the Cognitive Science Society .  Cooper, P.S.,  Garrett P.M. , Rennie J.L.   Karayanidis F. (2015)  Task Uncertainty Can Account for Mixing and Switch Costs in Task-Switching .  PLoS ONE . 10(6).", 
            "title": "Publications"
        }
    ]
}